{"ast":null,"code":"import { BaseChartDirective } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-charts\";\nexport let LineChartComponent = /*#__PURE__*/(() => {\n  class LineChartComponent {\n    constructor() {\n      this.lineChartData = {\n        datasets: [{\n          data: [65, 59, 80, 81, 56, 55, 40],\n          label: 'Series A',\n          backgroundColor: 'rgba(148,159,177,0.2)',\n          borderColor: 'rgba(148,159,177,1)',\n          pointBackgroundColor: 'rgba(148,159,177,1)',\n          pointBorderColor: '#fff',\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n          fill: 'origin'\n        }, {\n          data: [28, 48, 40, 19, 86, 27, 90],\n          label: 'Series B',\n          backgroundColor: 'rgba(77,83,96,0.2)',\n          borderColor: 'rgba(77,83,96,1)',\n          pointBackgroundColor: 'rgba(77,83,96,1)',\n          pointBorderColor: '#fff',\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: 'rgba(77,83,96,1)',\n          fill: 'origin'\n        }, {\n          data: [180, 480, 770, 90, 1000, 270, 400],\n          label: 'Series C',\n          yAxisID: 'y-axis-1',\n          backgroundColor: 'rgba(255,0,0,0.3)',\n          borderColor: 'red',\n          pointBackgroundColor: 'rgba(148,159,177,1)',\n          pointBorderColor: '#fff',\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: 'rgba(148,159,177,0.8)',\n          fill: 'origin'\n        }],\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July']\n      };\n    }\n\n    static generateNumber(i) {\n      return Math.floor(Math.random() * (i < 2 ? 100 : 1000) + 1);\n    }\n\n    randomize() {\n      var _a;\n\n      for (let i = 0; i < this.lineChartData.datasets.length; i++) {\n        for (let j = 0; j < this.lineChartData.datasets[i].data.length; j++) {\n          this.lineChartData.datasets[i].data[j] = LineChartComponent.generateNumber(i);\n        }\n      }\n\n      (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update();\n    } // events\n\n\n    chartClicked({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n    chartHovered({\n      event,\n      active\n    }) {\n      console.log(event, active);\n    }\n\n    hideOne() {\n      var _a, _b;\n\n      const isHidden = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.isDatasetHidden(1);\n      (_b = this.chart) === null || _b === void 0 ? void 0 : _b.hideDataset(1, !isHidden);\n    }\n\n    pushOne() {\n      var _a, _b, _c;\n\n      this.lineChartData.datasets.forEach((x, i) => {\n        const num = LineChartComponent.generateNumber(i);\n        x.data.push(num);\n      });\n      (_b = (_a = this.lineChartData) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b.push(`Label ${this.lineChartData.labels.length}`);\n      (_c = this.chart) === null || _c === void 0 ? void 0 : _c.update();\n    }\n\n    changeColor() {\n      var _a;\n\n      this.lineChartData.datasets[2].borderColor = 'green';\n      this.lineChartData.datasets[2].backgroundColor = `rgba(0, 255, 0, 0.3)`;\n      (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update();\n    }\n\n    changeLabel() {\n      var _a;\n\n      if (this.lineChartData.labels) {\n        this.lineChartData.labels[2] = ['1st Line', '2nd Line'];\n      }\n\n      (_a = this.chart) === null || _a === void 0 ? void 0 : _a.update();\n    }\n\n    ngOnInit() {}\n\n  }\n\n  LineChartComponent.ɵfac = function LineChartComponent_Factory(t) {\n    return new (t || LineChartComponent)();\n  };\n\n  LineChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LineChartComponent,\n    selectors: [[\"app-line-chart\"]],\n    viewQuery: function LineChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[\"baseChart\", \"\", \"width\", \"400\", \"height\", \"400\", \"type\", \"line\", 3, \"data\", \"chartHover\", \"chartClick\"]],\n    template: function LineChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"canvas\", 0);\n        i0.ɵɵlistener(\"chartHover\", function LineChartComponent_Template_canvas_chartHover_1_listener($event) {\n          return ctx.chartHovered($event);\n        })(\"chartClick\", function LineChartComponent_Template_canvas_chartClick_1_listener($event) {\n          return ctx.chartClicked($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"data\", ctx.lineChartData);\n      }\n    },\n    directives: [i1.BaseChartDirective],\n    styles: [\"\"]\n  });\n  return LineChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}